Complexity metrics,to, 24 maj 2018 14:01:10 CEST, #
Method,ev(G),iv(G),v(G)
 -.- , Essential Cyclomatic complexity, Design complexity, Cyclomatic Complexity
"Benchmarker.BenchmarkDurationFactoryImpl.CreateNewDuration(String)",1,1,1
"Benchmarker.BenchmarkDurationImpl.BenchmarkDurationImpl(String)",1,1,1
"Benchmarker.BenchmarkDurationImpl.addDuration(long)",1,1,1
"Benchmarker.BenchmarkDurationImpl.getDuration()",1,1,1
"Benchmarker.BenchmarkDurationImpl.getTask()",1,1,1
"Benchmarker.BenchmarkDurationImpl.removeDuration(long)",1,1,1
"Benchmarker.BenchmarkDurationImpl.reset()",1,1,1
"Benchmarker.BenchmarkLogFactoryImpl.CreateNewLog(DBMS,Query,BenchmarkDurationFactory)",1,1,1
"Benchmarker.BenchmarkLogImpl.BenchmarkLogImpl(DBMS,Query,BenchmarkTimer)",1,1,1
"Benchmarker.BenchmarkLogImpl.GetTimer()",1,1,1
"Benchmarker.BenchmarkLogImpl.PrepareMeForLogging()",1,2,2
"Benchmarker.BenchmarkTimerImpl.BenchmarkTimerImpl(BenchmarkDurationFactory)",1,1,1
"Benchmarker.BenchmarkTimerImpl.getDurations()",1,1,1
"Benchmarker.BenchmarkTimerImpl.start(String)",1,1,1
"Benchmarker.BenchmarkTimerImpl.stop(String)",1,2,2
"Benchmarker.BenmarkLoggerImpl.BenmarkLoggerImpl(BenchmarkLogFactory,BenchmarkDurationFactory)",1,1,1
"Benchmarker.BenmarkLoggerImpl.CreateNewLog(Query,DBMS)",1,1,1
"Benchmarker.BenmarkLoggerImpl.PrintLog()",1,1,1
"Benchmarker.BenmarkLoggerImpl.Savelog(BenchmarkLog)",1,1,1
"DataAcessors.MongoDataAcessor.GetAllAuthors()",1,2,2
"DataAcessors.MongoDataAcessor.GetAllBooks()",1,2,2
"DataAcessors.MongoDataAcessor.GetAllCities()",1,2,2
"DataAcessors.MongoDataAcessor.GetBookByAuthor(String)",1,2,2
"DataAcessors.MongoDataAcessor.GetBooksByCity(int)",1,2,2
"DataAcessors.MongoDataAcessor.GetBooksInVicenety(double,double,int)",1,2,2
"DataAcessors.MongoDataAcessor.GetCitiesBybook(int)",1,2,2
"DataAcessors.MongoDataAcessor.GetCityBybook(int)",1,2,2
"DataAcessors.MongoDataAcessor.MongoDataAcessor(String)",1,1,1
"DataAcessors.MongoDataAcessor.close()",1,1,1
"DataAcessors.Neo4jDataAcessor.GetAllAuthors()",1,2,2
"DataAcessors.Neo4jDataAcessor.GetAllBooks()",1,2,2
"DataAcessors.Neo4jDataAcessor.GetAllCities()",1,2,2
"DataAcessors.Neo4jDataAcessor.GetBookByAuthor(String)",1,2,2
"DataAcessors.Neo4jDataAcessor.GetBooksByCity(int)",1,2,2
"DataAcessors.Neo4jDataAcessor.GetBooksInVicenety(double,double,int)",1,4,6
"DataAcessors.Neo4jDataAcessor.GetCitiesBybook(int)",1,2,2
"DataAcessors.Neo4jDataAcessor.GetCityBybook(int)",1,3,3
"DataAcessors.Neo4jDataAcessor.Neo4jDataAcessor(Driver)",1,1,1
"DataAcessors.Neo4jDataAcessor.close()",1,1,1
"DataAcessors.PostgresDataAcessor.GetAllAuthors()",1,3,3
"DataAcessors.PostgresDataAcessor.GetAllBooks()",1,3,3
"DataAcessors.PostgresDataAcessor.GetAllCities()",1,3,3
"DataAcessors.PostgresDataAcessor.GetBookByAuthor(String)",1,3,3
"DataAcessors.PostgresDataAcessor.GetBooksByCity(int)",1,3,3
"DataAcessors.PostgresDataAcessor.GetBooksInVicenety(double,double,int)",1,5,7
"DataAcessors.PostgresDataAcessor.GetCitiesBybook(int)",1,3,3
"DataAcessors.PostgresDataAcessor.GetCityBybook(int)",1,3,3
"DataAcessors.PostgresDataAcessor.PostgresDataAcessor(String,String,String)",1,2,2
"DataAcessors.PostgresDataAcessor.close()",1,2,2
"DataAcessors.RedisDataAcessor.GetAllAuthors()",1,2,2
"DataAcessors.RedisDataAcessor.GetAllBooks()",1,3,3
"DataAcessors.RedisDataAcessor.GetAllCities()",1,3,3
"DataAcessors.RedisDataAcessor.GetBookByAuthor(String)",1,2,2
"DataAcessors.RedisDataAcessor.GetBooksByCity(int)",1,2,2
"DataAcessors.RedisDataAcessor.GetBooksInVicenety(double,double,int)",1,4,4
"DataAcessors.RedisDataAcessor.GetCitiesBybook(int)",1,2,2
"DataAcessors.RedisDataAcessor.GetCityBybook(int)",1,2,2
"DataAcessors.RedisDataAcessor.RedisDataAcessor(String)",1,1,1
"DataAcessors.RedisDataAcessor.close()",1,1,1
"DataAcessors.StubbedDataAccessor.GetAllAuthors()",1,1,1
"DataAcessors.StubbedDataAccessor.GetAllBooks()",1,1,1
"DataAcessors.StubbedDataAccessor.GetAllCities()",1,1,1
"DataAcessors.StubbedDataAccessor.GetBookByAuthor(String)",1,1,1
"DataAcessors.StubbedDataAccessor.GetBooksByCity(int)",1,1,1
"DataAcessors.StubbedDataAccessor.GetBooksInVicenety(double,double,int)",1,1,1
"DataAcessors.StubbedDataAccessor.GetCitiesBybook(int)",1,1,1
"DataAcessors.StubbedDataAccessor.GetCityBybook(int)",1,1,1
"DataAcessors.StubbedDataAccessor.close()",1,1,1
"DataObjects.AllAuthors.AllAuthors(Author[])",1,1,1
"DataObjects.AllBooks.AllBooks(Book[])",1,1,1
"DataObjects.AllCities.AllCities(City[])",1,1,1
"DataObjects.Author.Author(String)",1,1,1
"DataObjects.BMTask.BMTask(String,int)",1,1,1
"DataObjects.Book.Book(int,String)",1,1,1
"DataObjects.BookWithMentions.BookWithMentions(String,String,int)",1,1,1
"DataObjects.BooksByAuthor.BooksByAuthor(String,Book[])",1,1,1
"DataObjects.BooksByCity.BooksByCity(BookWithMentions[])",1,1,1
"DataObjects.BooksByVicenety.BooksByVicenety(CityAndBooks[])",1,1,1
"DataObjects.City.City(int,String)",1,1,1
"DataObjects.CityAndBooks.CityAndBooks(String,double,double,Book[])",1,1,1
"DataObjects.CityByBook.CityByBook(int,String,CityWithCords[])",1,1,1
"DataObjects.CityWithCords.CityWithCords(String,double,double)",1,1,1
"DataObjects.Fulllog.Fulllog(log[])",1,1,1
"DataObjects.Json.DataSerializer.SerializeToJson()",1,1,1
"DataObjects.ManyCitiesWithCords.ManyCitiesWithCords(CityWithCords[])",1,1,1
"DataObjects.log.log(String,String,BMTask[],int)",1,1,1
"Main.Main.main(String[])",1,1,1
"Main.SpringBootController.AllBooks()",1,1,1
"Main.SpringBootController.AllCities()",1,1,1
"Main.SpringBootController.BooksByLocation(double,double)",1,1,1
"Main.SpringBootController.BooksByauthor(String)",1,1,1
"Main.SpringBootController.ByCity(int)",1,1,1
"Main.SpringBootController.CitiesByBook(int)",1,1,1
"Main.SpringBootController.CitiesByBookWithExtra(int)",1,1,1
"Main.SpringBootController.PrintLog()",1,1,1
"Main.SpringBootController.SetDB(String,String)",2,2,6
"Main.SpringBootController.allauthors()",1,1,1
"Main.WebInitializer.configure(SpringApplicationBuilder)",1,1,1

Class,OCavg,WMC
"Benchmarker.BenchmarkDurationFactoryImpl","1,00",1
"Benchmarker.BenchmarkDurationImpl","1,00",6
"Benchmarker.BenchmarkLogFactoryImpl","1,00",1
"Benchmarker.BenchmarkLogImpl","1,33",4
"Benchmarker.BenchmarkTimerImpl","1,25",5
"Benchmarker.BenmarkLoggerImpl","1,00",4
"Benchmarker.enums.DBMS",n/a,0
"Benchmarker.enums.Query",n/a,0
"DataAcessors.MongoDataAcessor","1,80",18
"DataAcessors.Neo4jDataAcessor","2,30",23
"DataAcessors.PostgresDataAcessor","2,20",22
"DataAcessors.RedisDataAcessor","2,00",20
"DataAcessors.StubbedDataAccessor","1,00",9
"DataObjects.AllAuthors","1,00",1
"DataObjects.AllBooks","1,00",1
"DataObjects.AllCities","1,00",1
"DataObjects.Author","1,00",1
"DataObjects.BMTask","1,00",1
"DataObjects.Book","1,00",1
"DataObjects.BookWithMentions","1,00",1
"DataObjects.BooksByAuthor","1,00",1
"DataObjects.BooksByCity","1,00",1
"DataObjects.BooksByVicenety","1,00",1
"DataObjects.City","1,00",1
"DataObjects.CityAndBooks","1,00",1
"DataObjects.CityByBook","1,00",1
"DataObjects.CityWithCords","1,00",1
"DataObjects.Fulllog","1,00",1
"DataObjects.Json.DataSerializer","1,00",1
"DataObjects.ManyCitiesWithCords","1,00",1
"DataObjects.log","1,00",1
"Main.Main","1,00",1
"Main.SpringBootController","1,40",14
"Main.WebInitializer","1,00",1

Package,v(G)avg,v(G)tot
"Benchmarker","1,11",21
"DataAcessors","2,12",104
"DataObjects","1,00",17
"DataObjects.Json","1,00",1
"Main","1,42",17

Module,v(G)avg,v(G)tot
"DBParadigmsGroup10","1,63",160

Project,v(G)avg,v(G)tot
"project","1,63",160

